{"version":3,"sources":["../../Frontend/news-scraper/src/Wrapper.js","../../Frontend/news-scraper/src/Content.js","../../Frontend/news-scraper/src/ScrapeBtn.js","../../Frontend/news-scraper/src/Header.js","../../Frontend/news-scraper/src/CommentBox.js","../../Frontend/news-scraper/src/App.js","../../Frontend/news-scraper/src/serviceWorker.js","../../Frontend/news-scraper/src/index.js"],"names":["__webpack_require__","e","then","t","bind","Wrapper","props","react_default","a","createElement","className","children","Content","key","_id","id","title","href","link","src","image","alt","type","onChange","event","change","name","placeholder","onClick","addComment","comment","ScrapeBtn","clicky","Header","CommentBox","author","body","App","state","loadedData","returnedAuthor","returnedComment","componentDidMount","_this","displayArticles","scrape","fetch","res","json","console","log","returned","setState","handleInputChange","target","value","Object","defineProperty","getComment","concat","catch","err","inputs","options","headers","Content-Type","method","JSON","stringify","data","error","_this2","this","src_Wrapper","src_Header","src_ScrapeBtn","map","item","src_Content","src_CommentBox","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a3ff35b.chunk.js","sourcesContent":["import React from \"react\";\nimport (\"./CSS/Wrapper.css\");\n\nconst Wrapper = (props) => \n    <div className=\"wrapper\">{props.children}</div>;\n\n\nexport default Wrapper;","import React from \"react\";\nimport \"./CSS/ContentStyle.css\";\n\nconst Content = props => {\n  return (\n    <div className=\"main\" key={props._id} id={props._id}>\n      <table>\n        <thead>\n          <tr>\n            <th>{props.title}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>\n              <a href={\"https://www.nytimes.com/\" + props.link}>{props.link}</a>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <img src={props.image} alt=\"article\" />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"comment\" />\n      <input\n        type=\"text\"\n        onChange={event => props.change(event)}\n        name=\"author\"\n        placeholder=\"Your Name\"\n      />\n      <input\n        type=\"text\"\n        onChange={event => props.change(event)}\n        name=\"comment\"\n        placeholder=\"Your Comment\"\n      />\n      <button onClick={() => props.addComment(props.id)}>Submit</button>\n      <div className=\"commentSection\" onClick={() => props.comment(props.id)}>\n        <p>Click to see comments</p>\n        {/* <p>{props.author}  {props.body}</p> */}\n      </div>\n    </div>\n  );\n};\n\nexport default Content;\n","import React from 'react';\nimport (\"./CSS/ScrapeBtn.css\");\n\nconst ScrapeBtn = (props) => {\n    return (\n    <div className=\"scrapeBtn\">\n    <button onClick={() => props.clicky()}>Scrape New Articles</button>\n    </div>\n    )\n};\n\nexport default ScrapeBtn;","import React from \"react\";\n\nconst Header = () => {\n    return(\n        <div className=\"top\">\n            <header>\n                <h1>Science News Scraper</h1>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import React from \"react\";\n\nconst CommentBox = props => {\n    return (\n        <div>\n            <p>\n                {props.author + \" \"} {props.body}\n            </p>\n        </div>\n    )\n}\n\n\n\nexport default CommentBox;","import React from \"react\";\nimport Wrapper from \"./Wrapper\";\nimport Content from \"./Content\";\nimport ScrapeBtn from \"./ScrapeBtn\";\nimport Header from \"./Header\";\nimport CommentBox from \"./CommentBox\"\n\nclass App extends React.Component {\n  state = {\n    loadedData: [],\n    author: \"\",\n    comment: \"\",\n    returnedAuthor: \"\",\n    returnedComment: \"\",\n  };\n\n  componentDidMount = () => {\n    this.displayArticles();\n  };\n\n  //called when you press \"scrapeBtn\"\n  scrape = () => {\n    fetch(`http://localhost:3002/scrape`).then(res => res.json());\n    console.log(this.state);\n    this.displayArticles();\n  };\n\n  displayArticles = () => {\n    fetch(`http://localhost:3002/api/data`)\n      .then(res => res.json())\n      .then(returned => this.setState({ loadedData: returned }));\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const name = event.target.name;\n    const value = event.target.value;\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  getComment = id => {\n    //get id of article from key attribute\n    console.log(id); \n    fetch(`http://localhost:3002/api/data/${id}`)\n    .then(res => res.json())\n    // .then(test => console.log(test));\n    // .then(test => console.log(test.comment.body, test.comment.author));\n    .then(returned => this.setState({ returnedAuthor: returned.comment.author, returnedComment: returned.comment.body}))\n    .catch(err => {\n        console.log(err);\n        this.setState({returnedAuthor: \"no author\", returnedComment: \"no comment\"});\n    })\n  }\n\n  addComment = id => {\n    const inputs = {author: this.state.author, body: this.state.comment};\n    console.log(inputs);\n    const options = {\n      headers: { \"Content-Type\": \"application/json\" },\n      method: \"POST\",\n      body: JSON.stringify(inputs)\n    };\n    fetch(`http://localhost:3002/api/data/${id}`, options)\n      .then(function(data) {\n        console.log(\"Request success: \", data);\n      })\n      .catch(function(error) {\n        console.log(\"Request failure: \", error);\n      });\n  };\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Header />\n        <ScrapeBtn clicky={this.scrape} />\n        {this.state.loadedData.map(item => (\n          <Content\n            title={item.title}\n            link={item.link}\n            image={item.image}\n            key={item._id}\n            id={item._id}\n            change={this.handleInputChange}\n            comment={this.getComment}\n            addComment={this.addComment}\n            author={this.state.returnedAuthor}\n            body={this.state.returnedComment}\n          >\n          </Content>\n        ))}\n        <CommentBox \n        author={this.state.returnedAuthor}\n        body={this.state.returnedComment}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}